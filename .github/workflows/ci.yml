name: ehpc.io CI

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE: ghcr.io/${{ github.repository }}
  CARGO_TERM_COLOR: always
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ github.token }}
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  lint_and_test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Install bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: "package.json"

      - name: Cache bun deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: bun-${{ runner.os }}-${{ hashFiles('bun.lock') }}
          restore-keys: |
            bun-${{ runner.os }}-

      - name: Install JS deps
        run: bun install --frozen-lockfile

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache cargo deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry
            ~/.cargo/git
            wasm/target
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: Install WASM deps
        run: curl https://drager.github.io/wasm-pack/installer/init.sh -sSf | bash -s -- -y

      - name: Run WASM tests
        run: bun test:wasm

      - name: Build WASM
        run: bun build:wasm

      - name: Lint js
        run: |
          bun run lint

      - name: Run js tests
        run: bun test

  build_and_push:
    if: github.event_name == 'push'
    needs: [lint_and_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to ghcr.io
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}

      - name: Read package.json metadata
        id: meta
        shell: bash
        run: |
          NAME=$(jq -r '.name // "app"' package.json)
          VERSION=v$(jq -r '.version // "0.0.0"' package.json)
          DESCRIPTION=$(jq -r '.description // "No description"' package.json)
          AUTHOR_NAME=$(jq -r '.author.name // "Unknown"' package.json)
          AUTHOR_URL=$(jq -r '.author.url // ""' package.json)
          AUTHOR_EMAIL=$(jq -r '.author.email // ""' package.json)
          LICENSE=$(jq -r '.license // "UNLICENSED"' package.json)
          HOMEPAGE=$(jq -r '.homepage // ""' package.json)
          REPOSITORY=$(jq -r '.repository | if type == "object" then .url else . end // ""' package.json)
          VENDOR="ehpc"
          DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)

          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "description=$DESCRIPTION" >> "$GITHUB_OUTPUT"
          echo "author=$AUTHOR_NAME <$AUTHOR_EMAIL> ($AUTHOR_URL)" >> "$GITHUB_OUTPUT"
          echo "license=$LICENSE" >> "$GITHUB_OUTPUT"
          echo "homepage=$HOMEPAGE" >> "$GITHUB_OUTPUT"
          echo "repository=$REPOSITORY" >> "$GITHUB_OUTPUT"
          echo "vendor=$VENDOR" >> "$GITHUB_OUTPUT"
          echo "created=$DATE" >> "$GITHUB_OUTPUT"

      - name: Build image
        run: |
          podman build \
            --pull=always \
            --build-arg APP_VERSION="${{ steps.meta.outputs.version }}" \
            --tag $IMAGE:sha-${{ github.sha }} \
            --label org.opencontainers.image.title="${{ steps.meta.outputs.name }}" \
            --label org.opencontainers.image.description="${{ steps.meta.outputs.description }}" \
            --label org.opencontainers.image.source="${{ steps.meta.outputs.repository }}" \
            --label org.opencontainers.image.url="${{ steps.meta.outputs.homepage }}" \
            --label org.opencontainers.image.vendor="${{ steps.meta.outputs.vendor }}" \
            --label org.opencontainers.image.authors="${{ steps.meta.outputs.author }}" \
            --label org.opencontainers.image.licenses="${{ steps.meta.outputs.license }}" \
            --label org.opencontainers.image.created="${{ steps.meta.outputs.created }}" \
            --label org.opencontainers.image.version="${{ steps.meta.outputs.version }}" \
            --annotation org.opencontainers.image.title="${{ steps.meta.outputs.name }}" \
            --annotation org.opencontainers.image.description="${{ steps.meta.outputs.description }}" \
            --annotation org.opencontainers.image.source="${{ steps.meta.outputs.repository }}" \
            --annotation org.opencontainers.image.url="${{ steps.meta.outputs.homepage }}" \
            --annotation org.opencontainers.image.vendor="${{ steps.meta.outputs.vendor }}" \
            --annotation org.opencontainers.image.authors="${{ steps.meta.outputs.author }}" \
            --annotation org.opencontainers.image.licenses="${{ steps.meta.outputs.license }}" \
            --annotation org.opencontainers.image.created="${{ steps.meta.outputs.created }}" \
            --annotation org.opencontainers.image.version="${{ steps.meta.outputs.version }}" \
            .

      - name: Inspect image
        run: podman image inspect $IMAGE:sha-${{ github.sha }}

      - name: Push sha image
        run: podman push $IMAGE:sha-${{ github.sha }}

      - name: Push prod image
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          podman tag $IMAGE:sha-${{ github.sha }} $IMAGE:${{ github.ref_name }}
          podman push $IMAGE:${{ github.ref_name }}

          podman tag $IMAGE:${{ github.ref_name }} $IMAGE:prod
          podman push $IMAGE:prod
