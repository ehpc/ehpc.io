#!/usr/bin/env node

var app = require('../app'),
	debug = require('debug')('ehpc.io:server'),
	http = require('http'),
	port, server;

/**
 * Normalize a port into a number, string, or false
 */
function normalizePort(val) {
	var port = parseInt(val, 10);
	// Named pipe
	if (isNaN(port)) {
		return val;
	}
	// Port number
	if (port >= 0) {
		return port;
	}
	return false;
}

/**
 * Event listener for HTTP server "error" event
 */
function onError(error) {
	var bind;
	if (error.syscall !== 'listen') {
		throw error;
	}
	bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
	// Handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address(),
		bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}

port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
